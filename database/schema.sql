-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE IF NOT EXISTS public.alembic_version
(
    version_num character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT alembic_version_pkey PRIMARY KEY (version_num)
);

CREATE TABLE IF NOT EXISTS public.analytics
(
    analytics_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    user_id character varying COLLATE pg_catalog."default",
    session_id character varying COLLATE pg_catalog."default",
    event_type character varying COLLATE pg_catalog."default" NOT NULL,
    event_data jsonb DEFAULT '{}'::jsonb,
    "timestamp" timestamp with time zone DEFAULT now(),
    ip_address character varying COLLATE pg_catalog."default",
    user_agent character varying COLLATE pg_catalog."default",
    performance_data jsonb DEFAULT '{}'::jsonb,
    CONSTRAINT analytics_pkey PRIMARY KEY (analytics_id)
);

CREATE TABLE IF NOT EXISTS public.annotations
(
    annotation_id character varying COLLATE pg_catalog."default" NOT NULL,
    image_id character varying COLLATE pg_catalog."default",
    type character varying COLLATE pg_catalog."default",
    attributes jsonb,
    color character varying COLLATE pg_catalog."default",
    label character varying COLLATE pg_catalog."default",
    severity character varying COLLATE pg_catalog."default",
    width double precision,
    height double precision,
    x double precision,
    y double precision,
    created_at timestamp with time zone DEFAULT now(),
    last_modified_at timestamp with time zone DEFAULT now(),
    label_id character varying COLLATE pg_catalog."default",
    CONSTRAINT annotations_pkey PRIMARY KEY (annotation_id)
);

CREATE TABLE IF NOT EXISTS public.chat_attachments
(
    attachment_id character varying COLLATE pg_catalog."default" NOT NULL,
    message_id character varying COLLATE pg_catalog."default",
    file_name character varying COLLATE pg_catalog."default",
    file_type character varying COLLATE pg_catalog."default",
    file_metadata jsonb,
    file_url character varying COLLATE pg_catalog."default",
    "timestamp" timestamp with time zone DEFAULT now(),
    CONSTRAINT chat_attachments_pkey PRIMARY KEY (attachment_id)
);

CREATE TABLE IF NOT EXISTS public.chat_feedbacks
(
    chat_feedback_id character varying COLLATE pg_catalog."default" NOT NULL,
    message_id character varying COLLATE pg_catalog."default",
    is_positive boolean,
    negative_reason jsonb,
    "timestamp" timestamp with time zone DEFAULT now(),
    CONSTRAINT chat_feedbacks_pkey PRIMARY KEY (chat_feedback_id)
);

CREATE TABLE IF NOT EXISTS public.chat_messages
(
    message_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    session_id character varying COLLATE pg_catalog."default" NOT NULL,
    role character varying COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now(),
    message_order integer,
    is_summarized boolean DEFAULT false,
    reply_to character varying COLLATE pg_catalog."default",
    type character varying COLLATE pg_catalog."default",
    CONSTRAINT chat_messages_pkey PRIMARY KEY (message_id)
);

CREATE TABLE IF NOT EXISTS public.chat_sessions
(
    session_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    user_id character varying COLLATE pg_catalog."default" NOT NULL,
    session_name character varying COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    expires_at timestamp with time zone,
    is_active boolean DEFAULT true,
    current_memory_id character varying COLLATE pg_catalog."default",
    message_count integer DEFAULT 0,
    starred boolean DEFAULT false,
    CONSTRAINT sessions_pkey PRIMARY KEY (session_id)
);

CREATE TABLE IF NOT EXISTS public.conversation_memory
(
    memory_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    session_id character varying COLLATE pg_catalog."default" NOT NULL,
    summary text COLLATE pg_catalog."default",
    up_to_message_order integer NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    summarization_strategy character varying COLLATE pg_catalog."default",
    CONSTRAINT conversation_memory_pkey PRIMARY KEY (memory_id)
);

CREATE TABLE IF NOT EXISTS public.daily_reports
(
    daily_report_id character varying COLLATE pg_catalog."default" NOT NULL,
    creator_id character varying COLLATE pg_catalog."default",
    report_metadata jsonb,
    overview_data jsonb,
    defect_data jsonb,
    order_info_data jsonb,
    summary_data text COLLATE pg_catalog."default",
    pdf_file_path character varying COLLATE pg_catalog."default",
    start_date date,
    end_date date,
    created_at timestamp with time zone DEFAULT now(),
    last_modified_at timestamp with time zone DEFAULT now(),
    CONSTRAINT daily_reports_pkey PRIMARY KEY (daily_report_id)
);

CREATE TABLE IF NOT EXISTS public.domain_sets
(
    domain_set_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    user_id character varying COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    domain_metadata_list jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    is_default boolean DEFAULT false,
    is_shared boolean DEFAULT false,
    usage_count integer DEFAULT 0,
    CONSTRAINT domain_sets_pkey PRIMARY KEY (domain_set_id)
);

CREATE TABLE IF NOT EXISTS public.images
(
    image_id character varying COLLATE pg_catalog."default" NOT NULL,
    user_id character varying COLLATE pg_catalog."default",
    project_id character varying COLLATE pg_catalog."default",
    predicted_image_id character varying COLLATE pg_catalog."default",
    s3_url character varying COLLATE pg_catalog."default",
    labeled boolean,
    tags jsonb,
    image_name character varying COLLATE pg_catalog."default",
    image_category character varying COLLATE pg_catalog."default",
    width integer,
    height integer,
    attributes jsonb,
    combined_image boolean,
    created_at timestamp with time zone DEFAULT now(),
    last_modified_at timestamp with time zone DEFAULT now(),
    CONSTRAINT images_pkey PRIMARY KEY (image_id)
);

CREATE TABLE IF NOT EXISTS public.predictions
(
    prediction_id character varying COLLATE pg_catalog."default" NOT NULL,
    image_id character varying COLLATE pg_catalog."default",
    defect_type character varying COLLATE pg_catalog."default",
    x double precision,
    y double precision,
    w double precision,
    h double precision,
    CONSTRAINT predictions_pkey PRIMARY KEY (prediction_id)
);

CREATE TABLE IF NOT EXISTS public.projects
(
    project_id character varying COLLATE pg_catalog."default" NOT NULL,
    creator_id character varying COLLATE pg_catalog."default",
    name character varying COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    type character varying COLLATE pg_catalog."default",
    category character varying COLLATE pg_catalog."default",
    tags jsonb,
    order_number character varying COLLATE pg_catalog."default",
    batch_number character varying COLLATE pg_catalog."default",
    style_number character varying COLLATE pg_catalog."default",
    production_line character varying COLLATE pg_catalog."default",
    image_category character varying COLLATE pg_catalog."default",
    attributes jsonb,
    total_num_of_inspections integer,
    is_active boolean,
    created_at timestamp with time zone DEFAULT now(),
    last_modified_at timestamp with time zone DEFAULT now(),
    CONSTRAINT projects_pkey PRIMARY KEY (project_id)
);

CREATE TABLE IF NOT EXISTS public.query_logs
(
    query_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    request_id character varying COLLATE pg_catalog."default" NOT NULL,
    query_text text COLLATE pg_catalog."default" NOT NULL,
    query_type character varying COLLATE pg_catalog."default" NOT NULL,
    websites json DEFAULT '[]'::json,
    results text COLLATE pg_catalog."default",
    citations jsonb,
    "timestamp" timestamp with time zone DEFAULT now(),
    status character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    CONSTRAINT query_logs_pkey PRIMARY KEY (query_id)
);

CREATE TABLE IF NOT EXISTS public.refer_codes
(
    refer_code_id character varying COLLATE pg_catalog."default" NOT NULL,
    code character varying COLLATE pg_catalog."default",
    used boolean,
    created_at timestamp with time zone DEFAULT now(),
    last_modified_at timestamp with time zone DEFAULT now(),
    CONSTRAINT refer_codes_pkey PRIMARY KEY (refer_code_id)
);

CREATE TABLE IF NOT EXISTS public.research_requests
(
    request_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    session_id character varying COLLATE pg_catalog."default" NOT NULL,
    message_id character varying COLLATE pg_catalog."default",
    enhanced_query text COLLATE pg_catalog."default" NOT NULL,
    workflow_type character varying COLLATE pg_catalog."default" NOT NULL,
    domain_metadata_used jsonb DEFAULT '{}'::jsonb,
    "timestamp" timestamp with time zone DEFAULT now(),
    processing_time double precision,
    status character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    CONSTRAINT research_requests_pkey PRIMARY KEY (request_id)
);

CREATE TABLE IF NOT EXISTS public.session_feedbacks
(
    session_feedback_id character varying COLLATE pg_catalog."default" NOT NULL,
    session_id character varying COLLATE pg_catalog."default",
    feedback_body jsonb,
    "timestamp" timestamp with time zone DEFAULT now(),
    CONSTRAINT session_feedbacks_pkey PRIMARY KEY (session_feedback_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT (uuid_generate_v4())::text,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    first_name character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    last_active timestamp with time zone,
    preferences jsonb DEFAULT '{}'::jsonb,
    hashed_password character varying COLLATE pg_catalog."default",
    id_token character varying COLLATE pg_catalog."default",
    token_version integer,
    last_name character varying COLLATE pg_catalog."default",
    company_name character varying COLLATE pg_catalog."default",
    employee_id character varying COLLATE pg_catalog."default",
    phone_number character varying COLLATE pg_catalog."default",
    country_code character varying COLLATE pg_catalog."default",
    geographic_location character varying COLLATE pg_catalog."default",
    email_verified boolean,
    reset_code character varying COLLATE pg_catalog."default",
    reset_code_expiry timestamp with time zone,
    industry_field character varying COLLATE pg_catalog."default",
    last_modified_at timestamp with time zone,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email)
);

-- Foreign Key Constraints
ALTER TABLE IF EXISTS public.analytics
    ADD CONSTRAINT analytics_session_id_fkey FOREIGN KEY (session_id)
    REFERENCES public.chat_sessions (session_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.analytics
    ADD CONSTRAINT analytics_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.annotations
    ADD CONSTRAINT annotations_image_id_fkey FOREIGN KEY (image_id)
    REFERENCES public.images (image_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.chat_attachments
    ADD CONSTRAINT chat_attachments_message_id_fkey FOREIGN KEY (message_id)
    REFERENCES public.chat_messages (message_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.chat_feedbacks
    ADD CONSTRAINT chat_feedbacks_message_id_fkey FOREIGN KEY (message_id)
    REFERENCES public.chat_messages (message_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.chat_messages
    ADD CONSTRAINT chat_messages_session_id_fkey FOREIGN KEY (session_id)
    REFERENCES public.chat_sessions (session_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.chat_messages
    ADD CONSTRAINT fk_reply_to_message FOREIGN KEY (reply_to)
    REFERENCES public.chat_messages (message_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.chat_sessions
    ADD CONSTRAINT fk_sessions_current_memory FOREIGN KEY (current_memory_id)
    REFERENCES public.conversation_memory (memory_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.chat_sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.conversation_memory
    ADD CONSTRAINT conversation_memory_session_id_fkey FOREIGN KEY (session_id)
    REFERENCES public.chat_sessions (session_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.daily_reports
    ADD CONSTRAINT daily_reports_creator_id_fkey FOREIGN KEY (creator_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.domain_sets
    ADD CONSTRAINT domain_sets_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.images
    ADD CONSTRAINT images_project_id_fkey FOREIGN KEY (project_id)
    REFERENCES public.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.images
    ADD CONSTRAINT images_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.predictions
    ADD CONSTRAINT predictions_image_id_fkey FOREIGN KEY (image_id)
    REFERENCES public.images (image_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.projects
    ADD CONSTRAINT projects_creator_id_fkey FOREIGN KEY (creator_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.query_logs
    ADD CONSTRAINT query_logs_request_id_fkey FOREIGN KEY (request_id)
    REFERENCES public.research_requests (request_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.research_requests
    ADD CONSTRAINT research_requests_message_id_fkey FOREIGN KEY (message_id)
    REFERENCES public.chat_messages (message_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.research_requests
    ADD CONSTRAINT research_requests_session_id_fkey FOREIGN KEY (session_id)
    REFERENCES public.chat_sessions (session_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.session_feedbacks
    ADD CONSTRAINT session_feedbacks_session_id_fkey FOREIGN KEY (session_id)
    REFERENCES public.chat_sessions (session_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

-- Indexes
CREATE INDEX IF NOT EXISTS idx_analytics_user_id
    ON public.analytics(user_id);

CREATE INDEX IF NOT EXISTS idx_chat_messages_session_id
    ON public.chat_messages(session_id);

CREATE INDEX IF NOT EXISTS idx_query_logs_request_id
    ON public.query_logs(request_id);

CREATE INDEX IF NOT EXISTS idx_research_requests_session_id
    ON public.research_requests(session_id);

CREATE INDEX IF NOT EXISTS idx_sessions_user_id
    ON public.chat_sessions(user_id);

END; 